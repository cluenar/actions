name: Create release

on:
  pull_request:
    types: closed
    branches: main
  workflow_call:
    secrets:
      token:
        description: GitHub access token
      app-id:
        description: GitHub app ID
      private-key:
        description: GitHub app private key

jobs:
  create-release:
    name: Create release
    runs-on: ubuntu-latest
    if: >-
      startsWith(github.head_ref, 'release-') &&
      github.event.pull_request.merged == true
    env:
      SECRET_TOKEN: ${{ secrets.token }}
      SECRET_APP_ID: ${{ secrets.app-id || secrets.CLUENAR_PUBLIC_BOT_APP_ID }}
      SECRET_PRIVATE_KEY: ${{ secrets.private-key || secrets.CLUENAR_PUBLIC_BOT_PRIVATE_KEY }}

    steps:
      - name: Check required secrets
        if: env.SECRET_TOKEN == null && (env.SECRET_APP_ID == null || env.SECRET_PRIVATE_KEY == null)
        run: exit 1
        shell: bash

      - name: Get bot token
        id: get-bot-token
        if: env.SECRET_TOKEN == null
        uses: cluenar/actions/get-github-app-token@main
        with:
          app-id: ${{ env.SECRET_APP_ID }}
          private-key: ${{ env.SECRET_PRIVATE_KEY }}

      - name: Set the release version env
        run: echo "RELEASE_VERSION=$(echo '${{ github.head_ref }}' | cut -d'-' -f 2)" >> $GITHUB_ENV

      - name: Get id of the latest branch
        id: get-latest-ref
        uses: octokit/graphql-action@v2.2.25
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          query: |
            query getRef($owner: String!, $repo: String!, $name: String!) {
              repository(owner: $owner, name: $repo) {
                ref(qualifiedName: $name) {
                  id
                }
              }
            }
          owner: ${{ github.event.repository.owner.login }}
          repo: ${{ github.event.repository.name }}
          name: latest

      - name: Reset the latest branch
        uses: octokit/graphql-action@v2.2.25
        with:
          token: ${{ env.SECRET_TOKEN || steps.get-bot-token.outputs.token }}
          query: |
            mutation updateRef($id: ID!, $oid: GitObjectID!) {
              updateRef(input: {refId: $id, oid: $oid}) {
                clientMutationId
              }
            }
          id: ${{ fromJson(steps.get-latest-ref.outputs.data).repository.ref.id }}
          oid: ${{ github.event.pull_request.merge_commit_sha }}

      - name: Install
        uses: cluenar/actions/install@main

      - name: Extract the changelog
        id: extract-changelog
        run: npm run release extract-changelog

      - name: Create a new GitHub release
        uses: octokit/request-action@v2.1.9
        with:
          route: POST /repos/{owner}/{repo}/releases
          owner: ${{ github.event.repository.owner.login }}
          repo: ${{ github.event.repository.name }}
          tag_name: v${{ env.RELEASE_VERSION }}
          target_commitish: ${{ github.event.pull_request.merge_commit_sha }}
          name: Version ${{ env.RELEASE_VERSION }}
          body: ${{ toJSON(steps.extract-changelog.outputs.changelog) }}
          GITHUB_TOKEN: ${{ env.SECRET_TOKEN || steps.get-bot-token.outputs.token || secrets.GITHUB_TOKEN }}
